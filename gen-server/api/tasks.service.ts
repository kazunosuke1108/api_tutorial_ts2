/**
 * API
 * API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Injectable, Optional } from '@nestjs/common';
import { HttpService } from '@nestjs/axios';
import type { AxiosRequestConfig, AxiosResponse } from 'axios';
import { Observable, from, of, switchMap } from 'rxjs';
import { CreateTaskDto } from '../model/createTaskDto';
import { Configuration } from '../configuration';
import { COLLECTION_FORMATS } from '../variables';


@Injectable()
export class TasksService {

    protected basePath = 'http://localhost';
    public defaultHeaders: Record<string,string> = {};
    public configuration = new Configuration();
    protected httpClient: HttpService;

    constructor(httpClient: HttpService, @Optional() configuration: Configuration) {
        this.configuration = configuration || this.configuration;
        this.basePath = configuration?.basePath || this.basePath;
        this.httpClient = configuration?.httpClient || httpClient;
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        return consumes.includes(form);
    }

    /**
     * Create a task
     * 
     * @param createTaskDto 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     * @param {*} [tasksControllerCreateOpts.config] Override http request option.
     */
    public tasksControllerCreate(createTaskDto: CreateTaskDto, tasksControllerCreateOpts?: { config?: AxiosRequestConfig }): Observable<AxiosResponse<any>>;
    public tasksControllerCreate(createTaskDto: CreateTaskDto, tasksControllerCreateOpts?: { config?: AxiosRequestConfig }): Observable<any> {
        if (createTaskDto === null || createTaskDto === undefined) {
            throw new Error('Required parameter createTaskDto was null or undefined when calling tasksControllerCreate.');
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.post<any>(`${this.basePath}/tasks`,
                    createTaskDto,
                    {
                        withCredentials: this.configuration.withCredentials,
                        ...tasksControllerCreateOpts?.config,
                        headers: {...headers, ...tasksControllerCreateOpts?.config?.headers},
                    }
                );
            })
        );
    }
    /**
     * List tasks
     * 
     * @param done true or false
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     * @param {*} [tasksControllerFindAllOpts.config] Override http request option.
     */
    public tasksControllerFindAll(done?: string, tasksControllerFindAllOpts?: { config?: AxiosRequestConfig }): Observable<AxiosResponse<any>>;
    public tasksControllerFindAll(done?: string, tasksControllerFindAllOpts?: { config?: AxiosRequestConfig }): Observable<any> {
        let queryParameters = new URLSearchParams();
        if (done !== undefined && done !== null) {
            queryParameters.append('done', <any>done);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.get<any>(`${this.basePath}/tasks`,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        ...tasksControllerFindAllOpts?.config,
                        headers: {...headers, ...tasksControllerFindAllOpts?.config?.headers},
                    }
                );
            })
        );
    }
    /**
     * Get a task by id
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     * @param {*} [tasksControllerFindOneOpts.config] Override http request option.
     */
    public tasksControllerFindOne(id: number, tasksControllerFindOneOpts?: { config?: AxiosRequestConfig }): Observable<AxiosResponse<any>>;
    public tasksControllerFindOne(id: number, tasksControllerFindOneOpts?: { config?: AxiosRequestConfig }): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling tasksControllerFindOne.');
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.get<any>(`${this.basePath}/tasks/${encodeURIComponent(String(id))}`,
                    {
                        withCredentials: this.configuration.withCredentials,
                        ...tasksControllerFindOneOpts?.config,
                        headers: {...headers, ...tasksControllerFindOneOpts?.config?.headers},
                    }
                );
            })
        );
    }
    /**
     * Delete a task by id
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     * @param {*} [tasksControllerRemoveOpts.config] Override http request option.
     */
    public tasksControllerRemove(id: number, tasksControllerRemoveOpts?: { config?: AxiosRequestConfig }): Observable<AxiosResponse<any>>;
    public tasksControllerRemove(id: number, tasksControllerRemoveOpts?: { config?: AxiosRequestConfig }): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling tasksControllerRemove.');
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.delete<any>(`${this.basePath}/tasks/${encodeURIComponent(String(id))}`,
                    {
                        withCredentials: this.configuration.withCredentials,
                        ...tasksControllerRemoveOpts?.config,
                        headers: {...headers, ...tasksControllerRemoveOpts?.config?.headers},
                    }
                );
            })
        );
    }
    /**
     * Mark the task as done
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     * @param {*} [tasksControllerUpdateDoneOpts.config] Override http request option.
     */
    public tasksControllerUpdateDone(id: number, tasksControllerUpdateDoneOpts?: { config?: AxiosRequestConfig }): Observable<AxiosResponse<any>>;
    public tasksControllerUpdateDone(id: number, tasksControllerUpdateDoneOpts?: { config?: AxiosRequestConfig }): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling tasksControllerUpdateDone.');
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.patch<any>(`${this.basePath}/tasks/${encodeURIComponent(String(id))}/done`,
                    null,
                    {
                        withCredentials: this.configuration.withCredentials,
                        ...tasksControllerUpdateDoneOpts?.config,
                        headers: {...headers, ...tasksControllerUpdateDoneOpts?.config?.headers},
                    }
                );
            })
        );
    }
    /**
     * Mark the task as undone
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     * @param {*} [tasksControllerUpdateUnDoneOpts.config] Override http request option.
     */
    public tasksControllerUpdateUnDone(id: number, tasksControllerUpdateUnDoneOpts?: { config?: AxiosRequestConfig }): Observable<AxiosResponse<any>>;
    public tasksControllerUpdateUnDone(id: number, tasksControllerUpdateUnDoneOpts?: { config?: AxiosRequestConfig }): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling tasksControllerUpdateUnDone.');
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.patch<any>(`${this.basePath}/tasks/${encodeURIComponent(String(id))}/undone`,
                    null,
                    {
                        withCredentials: this.configuration.withCredentials,
                        ...tasksControllerUpdateUnDoneOpts?.config,
                        headers: {...headers, ...tasksControllerUpdateUnDoneOpts?.config?.headers},
                    }
                );
            })
        );
    }
}
