version: '3.9'
services:
  postgres:
    image: postgres:16
    container_name: miniapi_postgres
    environment:
      POSTGRES_USER: appuser
      POSTGRES_PASSWORD: apppass
      POSTGRES_DB: appdb
    ports:
      - "5432:5432"
    volumes:
      - pg_data:/var/lib/postgresql/data
      - ./postgres/init:/docker-entrypoint-initdb.d:ro # データベース初期化スクリプトのマウント
    healthcheck: # ヘルスチェック設定
      test: ["CMD-SHELL", "pg_isready -U appuser -d appdb"]
      interval: 5s
      timeout: 3s
      retries: 10
    networks:
      - appnet

  api:
    build: ./api
    container_name: miniapi_api
    environment:
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432 # DBのポート設定
      DATABASE_USER: appuser
      DATABASE_PASSWORD: apppass
      DATABASE_NAME: appdb
      NODE_ENV: development
      PORT: 3000 # APIのポート設定
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "3000:3000"
    volumes:
      - ./api:/app
      - ./openapi:/app/openapi-out
    command: npm run start:dev   
    networks:
      - appnet

  
  nginx:
    image:  nginx:1.27-alpine
    container_name: miniapi_nginx
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
    ports:
      - "80:80"
    depends_on:
      - api
    networks:
      - appnet

  pgadmin:
    image: dpage/pgadmin4:8
    container_name: miniapi_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: adminpass
    ports:
    - "5050:80" # ブラウザからのアクセスはhttp://localhost:5050
    depends_on:
      - postgres
    networks:
      - appnet

# frontend(本番用。5173でアクセス。buildし直さないと反映されない)
  # frontend:
  #   build: ./task-app  # ./task-app フォルダにあるDockerfileをビルド
  #   # ポートの公開設定
  #   # 例: Vite 開発サーバを 3000 で動かすDockerfileなら 5173:3000 とする
  #   ports:
  #     - "5173:3000"  # ホストの5173 → コンテナの3000
  #   depends_on:
  #     api:
  #       condition: service_started  # backend が起動してから起動
  #   networks:
  #     - appnet

# frontend(開発用。5173でアクセス。ホットリロード対応)
  frontend:
    build:
      context: ./task-app
      dockerfile: Dockerfile.dev
    ports:
      - "5173:3000"   # CRA の dev サーバは3000固定
    environment:
      - HOST=0.0.0.0  # 外部からアクセスできるように
    volumes:
      - ./task-app:/app      # ローカル編集を即反映
      - /app/node_modules    # node_modules はコンテナ側を保持
    depends_on:
      api:
        condition: service_started
    networks:
      - appnet

networks:
  appnet:  # すべてのサービスが接続する共通ネットワーク

volumes:
  pg_data: